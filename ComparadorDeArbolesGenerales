package GeneralTree;

import Queue.Queue;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

public class RecorridosAG {
    
    public List<Integer> numerosImparesMayoresQue(GeneralTree<Integer> a, Integer n){
        if(a.isEmpty())
            return null;
        
        List<Integer> Lista = new LinkedList<Integer>();
        
        PreOrden(a, n, Lista);
        return Lista;
    }
    
    private void PreOrden(GeneralTree<Integer> a, Integer n, List<Integer> lista){
        if((a.getDato() % 2 != 0) && (a.getDato() > n))
            lista.add(a.getDato());
        List<GeneralTree<Integer>> children = a.getChildren();
        for(GeneralTree<Integer> child: children){
            PreOrden(child, n, lista);
        }
    }
    
    private void InOrden(GeneralTree<Integer> a, Integer n, List<Integer> lista){
        List<GeneralTree<Integer>> children = a.getChildren();
        Iterator<GeneralTree<Integer>> it = children.iterator();
        
        if(it.hasNext())
            InOrden(it.next(), n, lista);
        
        if((a.getDato() > n) && (a.getDato() % 2 != 0))
            lista.add(a.getDato());
        
        while(it.hasNext())
            InOrden(it.next(), n, lista);
    }
    
    private void PostOrden(GeneralTree<Integer> a, Integer n, List<Integer> lista){
        List<GeneralTree<Integer>> children = a.getChildren();
        for(GeneralTree<Integer> child: children)
            PreOrden(child, n, lista);
        if((a.getDato() % 2 != 0) && (a.getDato() > n))
            lista.add(a.getDato());
    }
    
    private void PorNivel(GeneralTree<Integer> a, Integer n, List<Integer> lista){
        Queue<GeneralTree<Integer>> cola = new Queue<GeneralTree<Integer>>();
        GeneralTree<Integer> aux = new GeneralTree<Integer>();
        cola.enqueue(a);
        
        while(!cola.isEmpty()){
            aux = cola.dequeue();
            if((aux.getDato() > n) && (aux.getDato() % 2 != 0))
                lista.add(aux.getDato());
            List<GeneralTree<Integer>> children = aux.getChildren();
            for(GeneralTree<Integer> child: children)
                cola.enqueue(child);
        }
    }
}
